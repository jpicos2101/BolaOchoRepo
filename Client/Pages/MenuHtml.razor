@page "/menuhtml"
@using System.Text
@using System.ComponentModel.DataAnnotations
@using System.ComponentModel
@using System.Reflection

@code {
    [Parameter]
    public string FormattedHtml { get; set; } = string.Empty;

    public class MenuContent
    {
        public required List<Food> LstFoods { get; set; }
        public required List<Soda> LstSodas { get; set; }
        public required List<Beer> LstBeers { get; set; }
        public required List<Spirit> LstSpirits { get; set; }
    }

    public class Item
    {
        public string Name { get; set; } = string.Empty;

        public required string Description { get; set; }

        public required string PhotoPath { get; set; }

        public required decimal Price { get; set; }
    }

    public class Food : Item
    {
        public string TitlePortion { get; set; } = string.Empty;

        public List<SauceEnum>? LstSauces { get; set; }

        public List<PortionDetails>? LstPortions { get; set; }
    }

    public class Drink : Item
    {
        public int Capacity { get; set; } = 0;

        public string Paring { get; set; } = string.Empty;
    }

    public class Soda : Drink
    {

    }

    public class Beer : Drink
    {
        public bool IsCraftBeer { get; set; } = false;
    }

    public class Spirit : Drink
    {
        public bool SellingBottle { get; set; } = false;
    }

    public class PortionDetails
    {
        public required string PortionSize { get; set; }

        public required decimal Price { get; set; }
    }

    public enum SauceEnum
    {
        [Description("Bbq")]
        Bbq,
        [Description("Hot Bbq")]
        HotBbq,
        [Description("Buffalo")]
        Buffalo,
        [Description("T. Habanero")]
        TamarindoHabanero,
        [Description("M. Habanero")]
        MangoHabanero
    }

    public Dictionary<string, int> LstSauces = new Dictionary<string, int>();

    protected override void OnInitialized()
    {
        LstSauces.Add("Bbq", 0);
        LstSauces.Add("HotBbq", 1);
        LstSauces.Add("Buffalo", 1);
        LstSauces.Add("TamarindoHabanero", 2);
        LstSauces.Add("MangoHabanero", 2);

        var menuContent = new MenuContent()
        {
            LstFoods = new List<Food>()
            {
                new Food()
                {
                    Name = "Alitas",
                    Description = "Deliciosas alitas de pollo acompañadas de verduras y aderezo ranch",
                    TitlePortion = "350/700",
                    PhotoPath = "",
                    Price = 1.15M,
                    LstSauces = new List<SauceEnum>()
                    {
                        SauceEnum.Bbq,
                        SauceEnum.HotBbq,
                        SauceEnum.Buffalo,
                        SauceEnum.TamarindoHabanero,
                        SauceEnum.MangoHabanero
                    },
                    LstPortions = new List<PortionDetails>(){
                        new PortionDetails()
                        {
                            PortionSize = "350",
                            Price = 150
                        },
                        new PortionDetails()
                        {
                          PortionSize = "700",
                          Price = 250
                        }
                    }
                },
                new Food()
                {
                    Name = "Boneless",
                    Description = "Bolitas de pollo empanizadas acompañadas de verduras y aderezo ranch",
                    TitlePortion = "700",
                    PhotoPath = "",
                    Price = 1.15M,
                    LstSauces = new List<SauceEnum>()
                    {
                        SauceEnum.Bbq,
                        SauceEnum.HotBbq,
                        SauceEnum.Buffalo,
                        SauceEnum.TamarindoHabanero,
                        SauceEnum.MangoHabanero
                    }
                },
                new Food()
                {
                    Name = "Tenders",
                    Description = "Tiras de pollo empanizadas acompañadas de verduras y aderezo ranch",
                    TitlePortion = "700",
                    PhotoPath = "",
                    Price = 1.15M,
                    LstSauces = new List<SauceEnum>()
                    {
                        SauceEnum.Bbq,
                        SauceEnum.HotBbq,
                        SauceEnum.Buffalo,
                        SauceEnum.TamarindoHabanero,
                        SauceEnum.MangoHabanero
                    }
                },
                new Food()
                {
                    Name = "Hamburguesa de Pollo",
                    Description = "Hamburguesa de tenders de pollo, pan brichole y verduras",
                    TitlePortion = "700",
                    PhotoPath = "",
                    Price = 1.15M,
                    LstSauces = new List<SauceEnum>()
                    {
                        SauceEnum.Buffalo
                    }
                },
                new Food()
                {
                    Name = "Hamburguesa de Res",
                    Description = "Hamburguesa de arrachera, pan brichole y verduras",
                    TitlePortion = "700",
                    PhotoPath = "",
                    Price = 1.15M
                },
                new Food()
                {
                    Name = "Dedos de queso",
                    Description = "Barritas de queso empanizado con catsup como aderezo",
                    TitlePortion = "700",
                    PhotoPath = "",
                    Price = 1.15M
                },
                new Food()
                {
                    Name = "Papas a la francesa",
                    Description = "Papas a la francesa aderezadas con lemon pepper y catsup como aderezo",
                    TitlePortion = "700",
                    PhotoPath = "",
                    Price = 1.15M
                },
                new Food()
                {
                    Name = "Tiras de camote",
                    Description = "Tiras de camote aderezadas con lemon pepper y catsup como aderezo",
                    TitlePortion = "700",
                    PhotoPath = "",
                    Price = 1.15M
                }
            },
            LstSodas = new List<Soda>()
            {
              new Soda()
              {
                Name = "Coca Cola",
                Description = "",
                Capacity = 355,
                PhotoPath = "",
                Price = 35M
              },
              new Soda()
              {
                Name = "Coca Cola Light",
                Description = "",
                Capacity = 355,
                PhotoPath = "",
                Price = 35M
              },
              new Soda()
              {
                Name = "Fanta",
                Description = "",
                Capacity = 355,
                PhotoPath = "",
                Price = 35M
              },
              new Soda()
              {
                Name = "Fresca",
                Description = "",
                Capacity = 355,
                PhotoPath = "",
                Price = 35M
              },
              new Soda()
              {
                Name = "Fresca",
                Description = "",
                Capacity = 355,
                PhotoPath = "",
                Price = 35M
              },
            },
            LstBeers = new List<Beer>()
            {
                new Beer()
                {
                    Name = "TKT Light",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "../products/drinks/tkt_light.png",
                    Price = 35M
                },
                new Beer()
                {
                    Name = "TKT Roja",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "../products/drinks/tkt_roja.png",
                    Price = 35M
                },
                new Beer()
                {
                    Name = "Pacifico",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "../products/drinks/pacifico.png",
                    Price = 40M
                },
                new Beer()
                {
                    Name = "Corona",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "../products/drinks/corona.png",
                    Price = 40M
                },
                new Beer()
                {
                    Name = "Victoria",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "../products/drinks/victoria.png",
                    Price = 40M
                },
                new Beer()
                {
                    Name = "Boheima Clara",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "../products/drinks/bohemia_clara.png",
                    Price = 40M
                },
                new Beer()
                {
                    Name = "Boheima Obscura",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "",
                    Price = 40M
                },
                new Beer()
                {
                    Name = "Bohemia Cristal",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "../products/drinks/bohemia_cristal.png",
                    Price = 40M
                },
                new Beer()
                {
                    Name = "Bohemia Weizen",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "../products/drinks/bohemia_weizen.png",
                    Price = 40M
                },
                new Beer()
                {
                    Name = "Indio",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "../products/drinks/indio.png",
                    Price = 35M
                },
                new Beer()
                {
                    Name = "XX Ambar",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "../products/drinks/xx_ambar.png",
                    Price = 35M
                },
                new Beer()
                {
                    Name = "XX Lager",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "../products/drinks/xx_lager.png",
                    Price = 35M
                },
                new Beer()
                {
                    Name = "Heineken",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "",
                    Price = 40M
                },
                new Beer()
                {
                    Name = "Heineken 0.0",
                    Description = "",
                    Capacity = 250,
                    PhotoPath = "",
                    Price = 40M
                },
                new Beer()
                {
                    Name = "Amstel",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "",
                    Price = 40M
                },
                new Beer()
                {
                    Name = "Jabali Hellesbock",
                    Description = "",
                    Capacity = 330,
                    PhotoPath = "",
                    Price = 60M,
                    IsCraftBeer = true
                },
                new Beer()
                {
                    Name = "Jabali Bock",
                    Description = "",
                    Capacity = 330,
                    PhotoPath = "",
                    Price = 60M,
                    IsCraftBeer = true
                },
                new Beer()
                {
                    Name = "Jabali Salvajita",
                    Description = "",
                    Capacity = 330,
                    PhotoPath = "",
                    Price = 60M,
                    IsCraftBeer = true
                },
                new Beer()
                {
                    Name = "Fortuna Cañita",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "",
                    Price = 75M,
                    IsCraftBeer = true
                },
                new Beer()
                {
                    Name = "Fortuna California",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "",
                    Price = 75M,
                    IsCraftBeer = true
                },
                new Beer()
                {
                    Name = "Fortuna Ippolita",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "",
                    Price = 75M,
                    IsCraftBeer = true
                },
                new Beer()
                {
                    Name = "Fortuna Stout",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "",
                    Price = 75M,
                    IsCraftBeer = true
                },
                new Beer()
                {
                    Name = "Fortuna Neippolita",
                    Description = "",
                    Capacity = 355,
                    PhotoPath = "",
                    Price = 75M,
                    IsCraftBeer = true
                }
            },
            LstSpirits = new List<Spirit>()
            {
                new Spirit()
                {
                    Name = "Tequila 30x30 Blanco",
                    Description = "",
                    Capacity = 0,
                    PhotoPath = "",
                    Price = 0
                },
                new Spirit()
                {
                    Name = "Tequila 30x30 Cristalino",
                    Description = "",
                    Capacity = 0,
                    PhotoPath = "",
                    Price = 0
                },
                new Spirit()
                {
                    Name = "Johnnie Walker Etiqueta Roja",
                    Description = "",
                    Capacity = 0,
                    PhotoPath = "",
                    Price = 0
                }
            }
        };

        var counter = 1;
        var isRowCompleted = false;
        var strBuilder = new StringBuilder();

        FoodSection("Comida", ref strBuilder, ref counter, ref isRowCompleted, menuContent.LstFoods);

        DrinksSection("Refrescos", ref strBuilder, ref counter, ref isRowCompleted, menuContent.LstSodas.Cast<Drink>().ToList());

        DrinksSection("Cerveza", ref strBuilder, ref counter, ref isRowCompleted, menuContent.LstBeers.Where(x => x.IsCraftBeer == false).Cast<Drink>().ToList());

        DrinksSection("Cerveza Artesanal", ref strBuilder, ref counter, ref isRowCompleted, menuContent.LstBeers.Where(x => x.IsCraftBeer == true).Cast<Drink>().ToList());

        DrinksSection("Tequilas y Whiskies", ref strBuilder, ref counter, ref isRowCompleted, menuContent.LstSpirits.Cast<Drink>().ToList());

        FormattedHtml = strBuilder.ToString();
    }

    private void StartHtmlWrapper(Item item,
                                    ref StringBuilder strBuilder,
                                    ref int counter,
                                    ref bool isRowCompleted)
    {
        if (counter == 3)
        {
            counter = 1;
            isRowCompleted = false;
        }

        if (counter == 1)
            strBuilder.Append("<div class='box'>");

        var imgSrc = "";
        if (item.PhotoPath != "")
        {
            imgSrc = $"src='{item.PhotoPath}'";
        }
        else
        {
            imgSrc = $"data-src='holder.js/167x120'";
        }
    }

    private void EndHtmlWrapper(ref StringBuilder strBuilder,
                                ref int counter,
                                ref bool isRowCompleted)
    {
        if (counter == 2)
        {
            strBuilder.Append("</div>");
            isRowCompleted = true;
        }

        counter++;
    }

    private void FoodHtmlBody(Food food,
                            ref StringBuilder strBuilder,
                            ref int counter)
    {
        strBuilder.Append(
                    $@"
                    <div class='part-{counter} flip-card'>
                        <div class='flip-card-inner'>
                            <div class='flip-card-front'>
                                <div class='row'>
                                    <div class='col-7 order-2'>
                                        <h2>{food.Name} <span class='text-muted'>({food.TitlePortion} gr)</span></h2>
                                        <p class='lead'>{food.Description}</p>
                                    </div>
                                    <div class='col-5 order-1'>
                                        <img class='img-thumbnail'
                                        {ItemPhoto(food.PhotoPath)}
                                        alt='167x120'
                                        style='width: 167px; height: 120px;'
                                        data-holder-rendered='true'>
                                    </div>
                                </div>
                            </div>
                            <div class='flip-card-back'>
                                <div class='row'>
                                    <div class='col-8'>
                                        {GetPortionsDetails(food)}
                                    </div>
                                    <div class='col-4' style='font-size:small;'>
                                        {GetSauceList(food)}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    ");
    }

    private string GetPortionsDetails(Food food)
    {
        if (food.LstPortions == null) return "";

        var strBuilder = new StringBuilder();

        strBuilder.Append("<div>");
        foreach (var portion in food.LstPortions)
        {
            strBuilder.Append($"<div style='padding-top:15px;'>Porción de <strong>{portion.PortionSize} gr</strong> a tan solo <strong>${portion.Price}</strong></div>");
        }
        strBuilder.Append("</div>");

        return strBuilder.ToString();
    }

    private string GetSauceList(Food food)
    {
        if (food.LstSauces == null) return "";

        var strBuilder = new StringBuilder();

        strBuilder.Append("<ul class='list-unstyled'>");
        foreach (var sauce in food.LstSauces)
        {
            strBuilder.Append($"<li>{GetEnumDescription(sauce)}{SetSpicyness(LstSauces[sauce.ToString()])}</li>");
        }
        strBuilder.Append("</ul>");

        return strBuilder.ToString();
    }

    public string GetEnumDescription(SauceEnum sauce)
    {
        var enumType = typeof(SauceEnum);
        var memberInfo = enumType.GetMember(sauce.ToString());
        
        if (memberInfo.Length > 0)
        {
            var displayAttribute = (DescriptionAttribute)Attribute.GetCustomAttribute(memberInfo[0], typeof(DescriptionAttribute));

            if (displayAttribute != null)
            {
                return displayAttribute.Description;
            }
        }

        return sauce.ToString();
    }

    private string SetSpicyness(int spiceLevel)
    {
        var strBuilder = new StringBuilder();

        strBuilder.Append($"<div style='padding-left:15px;'>");
        for (int i = 0; i <= 2; i++)
        {
            var level = (i < spiceLevel ? "color:red;" : "");

            strBuilder.Append($"<i class='fas fa-pepper-hot' style='font-size:15px;{level}'></i>");
        }
        strBuilder.Append($"</div>");

        return strBuilder.ToString();
    }

    private void DrinksHtmlBody(Drink drink,
                                ref StringBuilder strBuilder,
                                ref int counter)
    {
        strBuilder.Append(
                        $@"<div class='part-{counter}'>
                        <div class='row'>
                            <div class='col-7 order-2'>
                                <h2>{drink.Name} <span class='text-muted'>({drink.Capacity} ml)</span></h2>
                                <h4 class='text-muted'>
                                    ${drink.Price}
                                </h4>
                            </div>
                            <div class='col-5 order-1'>
                                <img class='img-thumbnail'
                                {ItemPhoto(drink.PhotoPath)}
                                alt='167x120'
                                style='width: 167px; height: 120px;'
                                data-holder-rendered='true'>
                            </div>
                        </div>
                    </div>");
    }

    private string ItemPhoto(string photoPath)
    {
        var src = "";
        if (photoPath != "")
        {
            src = $"src='{photoPath}'";
        }
        else
        {
            src = $"data-src='holder.js/167x120'";
        }

        return src;
    }

    private void EndOfSection(ref StringBuilder strBuilder, ref bool isRowCompleted)
    {
        if (!isRowCompleted)
        {
            strBuilder.Append(
                            $@"<div class='part-2 flip-card' style='border: none;'>
                            <div class='row'>
                                <div class='col-7 order-2'>
                                </div>
                                <div class='col-5 order-1'>
                                </div>
                            </div>
                        </div>");
        }

        strBuilder.Append("</div>");

        strBuilder.Append($"<div>");
    }

    private void FoodSection(string sectionName, ref StringBuilder strBuilder, ref int counter, ref bool isRowCompleted, List<Food> lstFoods)
    {
        strBuilder.Append($"<br/><br/>");
        strBuilder.Append($"<div>");

        counter = 1;
        isRowCompleted = false;
        strBuilder.Append($"<h1>{sectionName}</h1>");
        foreach (var food in lstFoods)
        {
            StartHtmlWrapper(food, ref strBuilder, ref counter, ref isRowCompleted);

            FoodHtmlBody(food, ref strBuilder, ref counter);

            EndHtmlWrapper(ref strBuilder, ref counter, ref isRowCompleted);
        }

        EndOfSection(ref strBuilder, ref isRowCompleted);
    }

    private void DrinksSection(string sectionName, ref StringBuilder strBuilder, ref int counter, ref bool isRowCompleted, List<Drink> lstDrinks)
    {
        var adjustmentClass = !isRowCompleted ? "adjustmentClass" : "";

        strBuilder.Append($"<br/><br/>");
        strBuilder.Append($"<div class='{adjustmentClass}'>");

        counter = 1;
        isRowCompleted = false;
        strBuilder.Append($"<h1>{sectionName}</h1>");
        foreach (var drink in lstDrinks)
        {
            StartHtmlWrapper(drink, ref strBuilder, ref counter, ref isRowCompleted);

            DrinksHtmlBody(drink, ref strBuilder, ref counter);

            EndHtmlWrapper(ref strBuilder, ref counter, ref isRowCompleted);
        }

        EndOfSection(ref strBuilder, ref isRowCompleted);
    }
}

<style type="text/css">
    .box {
        display: flex;
        justify-content: center;
        flex-flow: row nowrap;
        /*margin-bottom: 5px;*/
    }

    .part-1, .part-2 {
        flex: 0 0 50%;
        border: 1px solid #f1f1f1;
        margin: 5px;
        padding: 5px;
        height: 210px;
    }

    @@media screen and (max-width:1000px) {
        .box {
            flex-flow: column nowrap;
            /*margin-bottom: 20px;*/
        }

        .text-muted {
            font-size: small;
        }

        .adjustmentClass {
            margin-top: -270px;
        }
    }

    /* The flip card container - set the width and height to whatever you want. We have added the border property to demonstrate that the flip itself goes out of the box on hover (remove perspective if you don't want the 3D effect */
    .flip-card {
        background-color: transparent;
        min-height: 210px;
        perspective: 1000px; /* Remove this if you don't want the 3D effect */
    }

    /* This container is needed to position the front and back side */
    .flip-card-inner {
        position: relative;
        width: 100%;
        height: 100%;
        /*text-align: center;*/
        transition: transform 0.8s;
        transform-style: preserve-3d;
    }

    /* Do an horizontal flip when you move the mouse over the flip box container */
    .flip-card:hover .flip-card-inner {
        transform: rotateY(180deg);
    }

    /* Position the front and back side */
    .flip-card-front, .flip-card-back {
        position: absolute;
        width: 100%;
        height: 100%;
        -webkit-backface-visibility: hidden; /* Safari */
        backface-visibility: hidden;
    }

    /* Style the front side (fallback if image is missing) */
    .flip-card-front {
        /*background-color: #bbb;*/
        color: black;
    }

    /* Style the back side */
    .flip-card-back {
        /*background-color: dodgerblue;
                        color: white;*/
        transform: rotateY(180deg);
    }
</style>

<script src="/vendors/holderjs/js/holder.js"></script>

<link href="/vendors/fontawesome/css/all.css" rel="stylesheet" />
<link href="/vendors/fontawesome/css/all.min.css" rel="stylesheet" />

<script src="/vendors/fontawesome/js/all.js"></script>
<script src="/vendors/fontawesome/js/all.min.js"></script>

@((MarkupString)FormattedHtml)

<script type="text/javascript">

</script>